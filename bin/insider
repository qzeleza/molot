#!/bin/bash
#----------------------------------------------------------------------------------
#
#   Проект: Молот [molot]
# 
#   Файл предназначен для сборки пакета в среде разработке 
#   для сборки пакета Квас Про под Entware внутри контейнера
# 
# 
#   Автор       : Железа
#   Email       : dev@zeleza.ru
#   Лицензия    : Apache Версия 2.0
#
#   Создан      : 27 октября 2024 год
#   Обновлен    : 30 октября 2024 год
# 
#----------------------------------------------------------------------------------
# 
#   Аргументы:
#       $1 - номер стадии с которой начаем сборку
#
#----------------------------------------------------------------------------------

# Включам редим вывода отладочных сообщений
# set -x

# Подключаем библиотеки общих функций
source ${HOME}/${APP_NAME}/molot/libs/general
source ${HOME}/${APP_NAME}/molot/libs/container

# Очистка экрана
clear && answer=""

_stage="${1}"

[ "${_stage}" = "clone" ] && _stage=2
[ "${_stage}" = "links" ] && _stage=2
[ "${_stage}" = "tools" ] && _stage=3
[ "${_stage}" = "app" ]   && _stage=4


# Обработка аргументов с использованием case
case "${_stage}" in
    
    "")
    # Без аргументов
        # Проверяем существование файла с первым запуском
        # В нем записан номер последней выполненной стадии
        _start_stage=$(get_last_stage)
        
        [ "${_start_stage}" -ge 1 ] && {
            print_line
            warning "Найдены данные от предыдущей сборки..."
            read_ynq "Удалить их и начать сборку заново?" answer

            [ "${answer}" = Y ] && _start_stage=0
        }

        [ "${_start_stage}" -eq 0 ] && {
            print_line
            header "Процесс предварительной сборки инструментария запущен с \"нуля\""  
            # Даем права на директорию
            sudo chown -R ${USER_NAME}:${USER_NAME} "$HOME/${APP_NAME}" 
        }

        # Без аргументов: выполняем отмеченные стадии
        [ "${answer}" = Q ] || run_stages "${_start_stage}" "${TOTAL_STAGES}" 
        ;;

    [1-"${TOTAL_STAGES}"])
        # Аргумент "N": выполняем стадии с N по последнюю стадию
        if [[ "${_stage}" =~ ^[1-${TOTAL_STAGES}]$ ]]; then
            # Получаем номер последней выполненной стадии сборки
            _start_stage=$(get_last_stage)
            # Начальная стадия не может быть больше последней выполненной
        	[ "${_stage}" -lt ${_start_stage} ] && _stage=${_start_stage}
            # Выполняем отмеченные стадии
            run_stages $((${_stage} - 1)) "${TOTAL_STAGES}" #|| exit 1
        else
            error " Задан неверный номер стадии сборки"
            warning "Использование: build <N>"
            warning "где N - номер стадии от 1 до ${TOTAL_STAGES}"
        fi
        ;;
    *)
        # Некорректные аргументы
        error "Заданы некорректные аргументы:"
        warning "Использование: build <N>"
        warning "где N - номер стадии от 1 до ${TOTAL_STAGES}"
        ;;
esac

hello
