#!/bin/bash
#----------------------------------------------------------------------------------
#
#   Проект: Молот [molot]
# 
#   Эта общая библиотека функций, которая используется 
# 	в различных местах пакета
# 
#   Автор       : Железа
#   Email       : dev@zeleza.ru
#   Лицензия    : Apache Версия 2.0
#
#   Создан      : 27 октября 2024 год
#   Обновлен    : 30 октября 2024 год
# 
#----------------------------------------------------------------------------------

LENGTH=80                    # длина строки в символах 
YELLOW="\e[33m"              # желтый цвет текста
BLUE="\e[36m"                # синий цвет текста
RED="\e[01;31m"              # красный цвет текста
BOLD="\e[1m"          		 # жирный цвет текста
GREEN="\e[32m"               # темно зеленый цвет текста
NOCL="\e[m"                  # возвращает текст к настройкам по умолчанию.


pause(){
	# просто выводим сообщение и ждем нажатия любой клавиши 
	[ -n "$1" ] && {
		echo -e "${GREEN}${BOLD}${1}${NOCL}"
		print_line
	}
	read -r pause &> /dev/null
}


print_line() {
	# функция печатает заданное число раз один и тот же символ
	len=$((LENGTH))
	printf "%${len}s\n" | tr " " "-"
}

message() {
	# Выводит простое сообщение
	echo -e "${1}"
}

header() {
	# Выводит заголовок
	# print_line
	echo -e "${GREEN}${BOLD}${1}${NOCL}"
	print_line
}

allright() {
	# Выводит если все хорошо
	echo -e "${GREEN}${BOLD}${1}${NOCL}"
}

error() {
	# Выводит сообщение об ошибке
    print_line
    echo -e "${RED}${BOLD}${1}${NOCL}"
    print_line
}

warning() {
	# Выводит предупреждение
	echo -e "${YELLOW}${BOLD}${1}${NOCL}"
}

is_host_available() {
	# Проверяем доступность хоста
    local _host="${1//root@/}"
    ping -c 2 -W 2 "${_host// /}"  &>/dev/null
}


read_ynq() {
# ------------------------------------------------------------------------------------------
#
#	 Читаем Y/N/Q из ввода данных в цикле
# 	 $1 - заголовок для запроса
# 	 $2 - переменная в которой возвращается результат
#
# ------------------------------------------------------------------------------------------
	header="$(echo "${1}" | tr -d '?')"; quest="[Y/N/Q]?"
#	в случае, если встретиться слово с корнем "удал", то цвет заголовка - красный
	if echo "${header}" | grep -qiE "удал"; then
		header="${YELLOW}${header} ${quest}${NOCL}";
	else
		if echo "${header}" | grep -qiE "[Y]"; then
			header="${BLUE}${header}${NOCL}";
		else
			header="${BLUE}${header} ${quest}${NOCL}";
		fi
	fi
	while true; do
		echo -en "${header}  "
		read -r ynq
		case "${ynq}" in
			[YyNnQq]* ) eval "${2}=${ynq^^}"; break; 
			;;
			*) echo -e "Пожалуйста ответьте на вопрос ${GREEN}'Y' - да${NOCL} или ${RED}'N' - нет${NOCL}, ${BLUE}Q - выход${NOCL}" 
			;;
		esac
	done
}

install_missing_packages() {
#------------------------------------------------------------------------------------------
# 
# 	Функция для проверки наличия команд и установки недостающих пакетов
# 	Аругуметы:
# 		$1 - массив с именами пакетов и командой установки, которые необходимо проверить и установить
# 			см. пример ниже, если пакет устанавливается системой, то  команда установки равна "apt"
# 
# 	Пример использования функции
# 		packages_to_check=(
# 				"docker" "curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh && sudo chmod 666 /var/run/docker.sock" 
# 				"mc" "apt"
# 				"htop" "apt") 
# 		install_missing_packages commands_to_check
# 
#------------------------------------------------------------------------------------------
install_missing_packages() {

    local -n package_list=$1   # Разыменовываем массив по ссылке
    local to_install_apt=""    # Переменная для накопления пакетов apt
    local custom_install_cmd="" # Переменная для команд не через apt

    # Цикл проверки каждого пакета
    for ((i = 0; i < ${#package_list[@]}; i+=2)); do
        local pkg_name="${package_list[i]}"         # Имя пакета
        local install_cmd="${package_list[i+1]}"    # Команда установки

		# Проверяем наличие пакета в системе
        command -v "$pkg_name" &> /dev/null || {
            # Проверяем, какая команда установки указана
            if [[ "$install_cmd" == "apt" ]]; then
                to_install_apt+="$pkg_name "
            else
                custom_install_cmd+="$install_cmd install $pkg_name && "
            fi
		}

    done

    # Установка всех недостающих пакетов через apt
    if [ -n "$to_install_apt" ]; then
		print_line
        header "Устанавливаем недостающие пакеты через apt: $to_install_apt"
        sudo apt update && sudo apt install -y $to_install_apt || return 1
    fi

    # Выполняем кастомные команды для установки
    if [ -n "$custom_install_cmd" ]; then
		print_line
        header "Устанавливаем недостающие пакеты через скрипты:"
        eval "${custom_install_cmd%&& }"  || return 1
    fi

	return 0
}



