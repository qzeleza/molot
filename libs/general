#!/bin/bash
#----------------------------------------------------------------------------------
#
#   Проект: Молот [molot]
# 
#   Эта общая библиотека функций, которая используется 
# 	в различных местах пакета
# 
#   Автор       : Железа
#   Email       : dev@zeleza.ru
#   Лицензия    : Apache Версия 2.0
#
#   Создан      : 27 октября 2024 год
#   Обновлен    : 30 октября 2024 год
# 
#----------------------------------------------------------------------------------

LENGTH=80                    # длина строки в символах 
YELLOW="\e[33m"              # желтый цвет текста
BLUE="\e[36m"                # синий цвет текста
RED="\e[01;31m"              # красный цвет текста
BOLD="\e[1m"          		 # жирный цвет текста
GREEN="\e[32m"               # темно зеленый цвет текста
NOCL="\e[m"                  # возвращает текст к настройкам по умолчанию.


# Проверяем есть ли пакет в системе
available() { command -v $1 >/dev/null; }

#---------------------------------------------------------------------------------
# 
#   Функция  Проверяет есть ли элеимент внутри массива?
# 
#   Аргументы:
#       $1 - array: массив.
#       $2 - element: строка или цифра которую ищем.
# 
#  Применение:
# 	array=("22" "gdff" "name")
# 	contains_element array name
# 
#---------------------------------------------------------------------------------
contains_element() {

    local -n array=$1
    local element=$2

    for item in "${array[@]}"; do
        if [[ "$item" == $element ]]; then
            return 0
        fi
    done

    return 1
}

#---------------------------------------------------------------------------------
# 
#   Функция find_index_in_array ищет значение в массиве и возвращает найденный 
#   инжекс элемент массива, начиная с 0, если не найдено, то возвращаем  -1.
# 
#   Аргументы:
#      $1 - array: Массив, в котором производится поиск, передаем по ссылке.
#      $2 - search_value: Значение, которое нужно найти в массиве.
# 
#   Возвращаемое значение:
#       Соответствующий элемент массива с заданным сдвигом, 
#       если значение найдено; в противном случае - "-1".
# 
#   Использование: 
#       array=(1 "ddd" 0
#              2 "sss" 0)
#       find_index_in_array array sss 
#       -> вернет 4
# 
#---------------------------------------------------------------------------------
find_index_in_array() {

    local  search_value ncols shift_out result
    local -n array="$1"
    search_value="${2}"
    result=-1

    #  цикл по массиву
    for ((i=0; i<${#array[@]}; i++)); do
        if [[ "${array[i]//$search_value/}" != ${array[i]} ]]; then
            # Если нашли, то возвращаем 
            # результат с заданным сдвигом в столбце
            result="${i}"
            break
        fi
    done

    # возвращаем результат поиска
    echo "${result}"
}

# возвращает максимальное из двух чисел
max() {
    (( $1 > $2 )) && echo "$1" || echo "$2"
}

# Функция генерирует случайное число от min до max
#	$1 - min, по умолчанию 0
#   $2 - max, по умолчанию 1

random(){

	local _min=${1:-0}
	local _max=${2:-1}

	echo $((RANDOM % (_max - _min + 1) + _min))
}

# Функция доплняет пробелами текстовую стороку до заданной ширины строки
#	$1 - строка, которую нужно увеличить пробелами
#   $2 - необходимая ширина новой строки
fill_str(){
	local _text=${1}
	local _width=${2}
	
	local _charlen=$(echo "${_text}" | sed -r "s/[\]033\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g")
	_charlen=${#_charlen}

	size=$(( _width - _charlen ))
	printf "%b%-${size}s%b" "${_text}"
}


pause(){
	# просто выводим сообщение и ждем нажатия любой клавиши 
	[ -n "$1" ] && {
		echo -e "${GREEN}${BOLD}${1}${NOCL}"
		print_line
	}
	read -r pause &> /dev/null
}


print_line(){
	# функция печатает заданное число раз один и тот же символ
	len=$((LENGTH))
	printf "%${len}s\n" | tr " " "-"
}

message(){
	# Выводит простое сообщение
	echo -e " ${1}"
}

header(){
	# Выводит заголовок
	# print_line
	echo -e " ${GREEN}${BOLD}${1}${NOCL}"
	print_line
}

allright(){
	# Выводит если все хорошо
	echo -e " ${GREEN}${BOLD}${1}${NOCL}"
}

error(){
	# Выводит сообщение об ошибке
    print_line
    echo -e " ${RED}${BOLD}${1}${NOCL}"
    print_line
}

warning(){
	# Выводит предупреждение
	echo -e " ${YELLOW}${BOLD}${1}${NOCL}"
}

is_host_available(){
	# Проверяем доступность хоста
    local _host="${1//root@/}"
    ping -c 2 -W 2 "${_host// /}"  &>/dev/null
}


read_ynq(){
# ------------------------------------------------------------------------------------------
#
#	 Читаем Y/N/Q из ввода данных в цикле
# 	 $1 - заголовок для запроса
# 	 $2 - переменная в которой возвращается результат
#
# ------------------------------------------------------------------------------------------
	header="$(echo "${1}" | tr -d '?')"; quest="[Y/N/Q]?"
#	в случае, если встретиться слово с корнем "удал", то цвет заголовка - красный
	if echo "${header}" | grep -qiE "удал"; then
		header="${YELLOW}${header} ${quest}${NOCL}";
	else
		if echo "${header}" | grep -qiE "[Y]"; then
			header="${BLUE}${header}${NOCL}";
		else
			header="${BLUE}${header} ${quest}${NOCL}";
		fi
	fi
	while true; do
		echo -en "${header}  "
		read -r ynq
		case "${ynq}" in
			[YyNnQq]* ) eval "${2}=${ynq^^}"; break; 
			;;
			*) echo -e "Пожалуйста ответьте на вопрос ${GREEN}'Y' - да${NOCL} или ${RED}'N' - нет${NOCL}, ${BLUE}Q - выход${NOCL}" 
			;;
		esac
	done
}

#------------------------------------------------------------------------------------------
# 
# 	Функция для проверки наличия команд и установки недостающих пакетов
# 	Аругуметы:
# 		$1 - массив с именами пакетов и командой установки, которые необходимо проверить и установить
# 			см. пример ниже, если пакет устанавливается системой, то  команда установки равна "apt"
# 
# 	Пример использования функции
# 		packages_to_check=(
# 				"docker" "curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh && sudo chmod 666 /var/run/docker.sock" 
# 				"mc" "apt"
# 				"htop" "apt") 
# 		install_missing_packages commands_to_check
# 
#------------------------------------------------------------------------------------------
install_missing_packages() {

    local -n package_list=$1   # Разыменовываем массив по ссылке
    local to_install_apt=""    # Переменная для накопления пакетов apt
    local custom_install_cmd="" # Переменная для команд не через apt

    # Цикл проверки каждого пакета
    for ((i = 0; i < ${#package_list[@]}; i+=2)); do
        local pkg_name="${package_list[i]}"         # Имя пакета
        local install_cmd="${package_list[i+1]}"    # Команда установки

		# Проверяем наличие пакета в системе
        available "$pkg_name" || {
            # Проверяем, какая команда установки указана
            if [[ "$install_cmd" == "apt" ]]; then
                to_install_apt+="$pkg_name "
            else
                custom_install_cmd+="$install_cmd install $pkg_name && "
            fi
		}

    done

    # Установка всех недостающих пакетов через apt
    if [ -n "$to_install_apt" ]; then
		print_line
        header "Устанавливаем недостающие пакеты через apt: $to_install_apt"
        sudo apt update && sudo apt install -y $to_install_apt || return 1
    fi

    # Выполняем кастомные команды для установки
    if [ -n "$custom_install_cmd" ]; then
		print_line
        header "Устанавливаем недостающие пакеты через скрипты:"
        eval "${custom_install_cmd%&& }"  || return 1
    fi

	return 0
}

highlight_words_to_multy_colors() {
    set -x 
    # Первый аргумент - ссылка на массив: 
    # 1 колонка - строка со словами для окрашивания 
    # 2 колонка - код цвета
    local -n words_ref="$1"  
    # Второй аргумент - путь к файлу
    local file="$2"    
    
    # Проверяем существование файла
    if [ ! -f "$file" ]; then
        echo "Файл не найден: $file"
        return 1
    fi

    # Проверяем, является ли первый аргумент массивом
    if ! declare -p "$1" &>/dev/null; then
        echo "Первый аргумент должен быть массивом"
        return 1
    fi

    # Создаем временную копию содержимого файла
    local content=$(cat "$file")
    local _nocl=$(echo "${NOCL}" | sed 's|\e|\\\\e|g')
    
    # Проходим по массиву с шагом 1 (для обработки пар значений)
    local len=${#words_ref[@]}

    for ((i=0; i<len; i+=2)); do
        local words_string="${words_ref[i]}"
        local color="${words_ref[i+1]}"  # Исправлено
        
        # Разбиваем строку на отдельные слова
        read -ra words <<< "$words_string"
        
        # Создаем регулярное выражение для группы слов
        local regex=""
        for word in "${words[@]}"; do
            if [ -n "$regex" ]; then
                regex="$regex|"
            fi
            regex="${regex}$word"
        done
        
        # Заменяем каждое вхождение слов на версию с цветом
        local color_code=$(echo "${color}" | sed 's|\e|\\\\e|g')
        content=$(echo -e "$content" | sed -E "s/\b($regex)\b/${color_code}&\\\e[m/g")
    done
    
    # Выводим результат
    printf "%b\n" "${content}"
}



_highlight_words_to_multy_colors() {

# находим в файле слова и окрашиваем их каждое слово заданным цветом 

	# Первый аргумент - ссылка на массив: 
    # 1 колонка - слово для окрашивания 
	# 2 колонка - код цвета
	local -n words_ref="$1"  
	# Второй аргумент - путь к файлу
	local file="$2"    
    
    # Проверяем существование файла
    if [ ! -f "$file" ]; then
        echo "Файл не найден: $file"
        return 1
    fi

    # Создаем временную копию содержимого файла
    local content=$(cat "$file")
	local _nocl=$(echo "${NOCL}" | sed 's|\e|\\\\e|g')

    # Проходим по массиву с шагом 2 (для обработки пар значений)
    local len=${#words_ref[@]}
    for ((i=0; i<len; i+=2)); do
        local word="${words_ref[i]}"
        local color=$(echo "${words_ref[i+1]}" | sed 's|\e|\\\\e|g')
        # Заменяем каждое вхождение слова на версию с цветом
         content=$(echo -e "$content" | sed -E "s|\b($word)\b|${color}\1${_nocl}|g")
    done
    
    # Выводим результат
    printf "%b\n" "${content}"
}

highlight_words_to_one_color() {

# находим в файле слова и окрашиваем их одним заданным цветом 

    local -n _words=$1       			# массив слов для поиска
    local _file="$2"         			# Первый аргумент - путь к файлу
	local _color_code=${3:-${BLUE}}		# Цвет окраски

	_color_code=$(echo "${_color_code}" | sed 's|\e|\\\\e|g')
	local _nocl=$(echo "${NOCL}" | sed 's|\e|\\\\e|g')

    # Проверяем существование файла
    if [ ! -f "$_file" ]; then
        error "Файл не найден: $_file"
        return 1
    fi 
	if ! declare -p "$1" &>/dev/null; then
		echo "Первый аргумент должен быть массивом"
		return 1
	fi

    # Создаем временную копию содержимого файла
    local content=$(cat "$_file")
    
    # Проходим по каждому слову в массиве
    for word in "${_words[@]}"; do
        # Заменяем каждое вхождение слова на версию с цветом
        # -E для поддержки регулярных выражений
        # \b для поиска целых слов
        content=$(echo -e "$content" | sed -E "s|\b($word)\b|${_color_code}\1${_nocl}|g")
    done
    
    # Выводим результат
	printf "%b\n" "${content}"
}
